# --- –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---#
from aiogram.types import Message
from aiogram import Router, F, types

# --- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---#
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter

# --- Imports –∏–∑ —Ñ–∞–π–ª–æ–≤ ---#
from keyboards.weather_kb import geolocation_kb
from utils.weather import get_weather_data_by_coords, get_weather_data_by_city

# –ü—Ä–æ–∫–ª–∞–¥–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
get_w_router = Router()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
class UserGeo(StatesGroup):
    get_weather_geo = State()


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –≤–≤–µ–¥–µ–Ω–æ–º—É –≥–æ—Ä–æ–¥—É ---#
@get_w_router.message(~F.text.startswith("/"), StateFilter(None))
async def get_weather(message: Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    # –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–≤–æ–¥—É –ø–æ–≥–æ–¥—ã
    if current_state in [
        "Time:setting_time",
        "Time:user_time",
        "Time:delete_time",
        "UserGeo:get_weather_geo",
    ]:
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    main_city = message.text

    try:
        weather = await get_weather_data_by_city(main_city)

        await message.answer(
            f"{weather['greeting']}, *{message.from_user.full_name}*!\n"
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {weather['city']}\n\n"
            "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            f"–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {weather['time']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['feels_like']}¬∞C\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
            f"–í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å",
            parse_mode="Markdown",
        )
    except Exception as e:
        print(e)
        await message.answer(
            "–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ"
        )


# --- –í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏---#


# –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ Inline –∫–Ω–æ–ø–∫–∏
@get_w_router.callback_query(F.data == "get_user_geo")
async def request_location(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await callback.message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏üëá", reply_markup=geolocation_kb
    )

    await state.set_state(UserGeo.get_weather_geo)


# –û—Ç–ø—Ä–∞–≤–∏–º –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
@get_w_router.message(F.location, UserGeo.get_weather_geo)
async def handle_location(message: types.Message, state: FSMContext):
    # –î–æ–ª–≥–æ—Ç–∞ –∏ —à–∏—Ä–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lat = message.location.latitude
    lon = message.location.longitude

    # –ü—Ä–æ–±—É–µ–º —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    try:
        weather = await get_weather_data_by_coords(lat, lon)

        await message.answer(
            f"{weather['greeting']}, *{message.from_user.full_name}*!\n"
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {weather['city']}\n\n"
            "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            f"–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {weather['time']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['feels_like']}¬∞C\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
            f"–í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å",
            parse_mode="Markdown",
        )
        await state.clear()
    except Exception as e:
        print(e)
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞—Å—å. "
            / "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ—Ç –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é üòî"
        )
        await state.clear()


# --- –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è ---#
@get_w_router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
async def cansel_button_action(message: types.Message, state: FSMContext):
    await message.delete()
    await state.clear()
