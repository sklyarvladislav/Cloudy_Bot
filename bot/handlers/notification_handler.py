# --- –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–∏–ª–∏–æ—Ç–µ–∫–∏ ---#
from aiogram import types, Router, F
from aiogram.types import Message
from datetime import datetime
import requests
from keyboards.time_kb import (
    menu_ikb,
    cancel_ikb,
    time_exist_ikb,
    no_time_ikb,
    create_times_ikb,
    create_cities_ikb,
    city_exist_ikb,
    city_not_exist_ikb,
)

# --- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---#
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---#
from database.db import (
    set_user_time_db,
    get_user_time_db,
    get_user_time_btn_db,
    delete_user_time_db,
    set_user_city_db,
    get_user_city_db,
    delete_user_city_db,
)

# –ü—Ä–æ–∫–ª–∞–¥–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
time_router = Router()


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Time(StatesGroup):
    fix_user_time = State()
    delete_time = State()
    fix_user_city = State()


# --- –í—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞ ---#
user_date = datetime.now()
user_t = int(user_date.strftime("%H"))


# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π --------#
@time_router.message(Command("time"))
async def time_manipulation(message: Message):
    user_id = message.from_user.id
    countTimes = get_user_time_db(user_id)
    user_set_city = get_user_city_db(user_id)

    await message.answer(
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîß\n*"
        "‚Ä¢ –õ–∏–º–∏—Ç –≥–æ—Ä–æ–¥–æ–≤: 1\n"
        "‚Ä¢ –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: *3*\n\n"
        f"üèô–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: *{user_set_city if user_set_city else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}*\n"
        f"üí¨–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *{countTimes}*",
        reply_markup=menu_ikb,
        parse_mode="Markdown",
    )


# --- –ë–ª–æ–∫ —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏ ---#
@time_router.callback_query(F.data == "set_user_time")
async def set_user_time_button(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00)"
    )

    # —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(Time.fix_user_time)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
@time_router.message(Time.fix_user_time)
async def save_user_time(message: Message, state: FSMContext):
    user_set_time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    if (
        len(user_set_time) == 5
        and user_set_time[2] == ":"
        and user_set_time.replace(":", "").isdigit()
        and int(user_set_time[:2]) <= 23
        and int(user_set_time[-2:]) <= 59
    ):
        success_db_answer = set_user_time_db(
            user_id=message.from_user.id, time=user_set_time
        )

        if success_db_answer:
            await message.delete()
            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç—á–µ—Ç –ø–æ –ø–æ–≥–æ–¥–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º –≤ *{user_set_time}* ‚õÖÔ∏è",
                parse_mode="Markdown",
            )

            await state.clear()
        else:
            await message.answer(
                "‚ùå –ü—Ä–µ–≤—ã—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω/–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—è –≤—Ä–µ–º—è."
                " –£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥",
                reply_markup=time_exist_ikb,
            )

    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:00)",
            reply_markup=cancel_ikb,
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è ---#
@time_router.callback_query(F.data == "cancel_action")
async def cancel_action(callback: types.CallbackQuery, state: FSMContext):
    # —á–∏—Å—Ç–∏–º –∑–∞ —Å–æ–±–æ–π —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# --- –ë–ª–æ–∫ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ --- #
@time_router.callback_query(F.data == "delete_time")
async def ask_to_delete_time(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    times = get_user_time_btn_db(user_id)

    if not times:
        await callback.message.answer(
            "‚ùóÔ∏è–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è‚ùóÔ∏è", reply_markup=no_time_ikb
        )
        await state.clear()
    else:
        generate_time_ikb = create_times_ikb(times)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=generate_time_ikb
        )
        await state.set_state(Time.delete_time)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ --- #
@time_router.callback_query(Time.delete_time, F.data.startswith("delete_"))
async def delete_set_time(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    time_to_delete = callback.data.replace("delete_", "")

    delete_user_time_db(user_id, time_to_delete)

    await callback.message.delete()
    await callback.message.answer(
        f"–í—Ä–µ–º—è *{time_to_delete}* —É–¥–∞–ª–µ–Ω–æ ‚úÖ", parse_mode="Markdown"
    )
    await state.clear()


# --- –ë–ª–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞ ---#
@time_router.callback_query(F.data == "set_users_city")
async def set_user_city_button(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ –∫–∞–∫–æ–º—É –≥–æ—Ä–æ–¥—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç:")
    await state.set_state(Time.fix_user_city)


@time_router.message(Time.fix_user_city)
async def save_user_city(message: Message, state: FSMContext):
    user_city = message.text.strip().title()

    check_city_url = "https://nominatim.openstreetmap.org/search"
    params = {"q": user_city, "format": "json", "limit": 2}
    headers = {"User-Agent": "Weather_bot"}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    try:
        response = requests.get(check_city_url, params=params, headers=headers)
        check_city_data = response.json()
    except Exception:
        await state.clear()
        return await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    if not check_city_data:
        return await message.answer(
            "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=cancel_ikb
        )

    # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
    cities_btn = []

    # –ü–µ—Ä–µ–±–µ—Ä–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for city in check_city_data:
        display_name = city.get("display_name", "")
        city_parts = display_name.split(", ")
        if len(city_parts) >= 2:
            cities_btn.append(f"{city_parts[0]}, {city_parts[1]}")

    # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    generate_city_ikb = create_cities_ikb(cities_btn)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ—Ä–æ–¥", reply_markup=generate_city_ikb)

    await state.set_state(Time.fix_user_city)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥
@time_router.callback_query(Time.fix_user_city, F.data.startswith("add_"))
async def add_city_in_db(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    city = callback.data.replace("add_", "")

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–¥
    success = set_user_city_db(user_id, city)

    await callback.message.delete()

    if success:
        await callback.message.answer(
            f"–û—Ç—á–µ—Ç –æ –ø–æ–≥–æ–¥–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –≥–æ—Ä–æ–¥—É: *{city}*", parse_mode="Markdown"
        )
    else:
        current_city = get_user_city_db(user_id)
        await callback.message.answer(
            f"–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {current_city}",
            parse_mode="Markdown",
            reply_markup=city_exist_ikb,
        )

    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@time_router.callback_query(F.data == "delete_users_city")
async def delete_city(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    city = get_user_city_db(user_id)

    if city is None:
        await callback.message.answer(
            "–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=city_not_exist_ikb
        )
    else:
        delete_user_city_db(user_id, city)
        await callback.message.delete()
        await callback.message.answer(
            "–ì–æ—Ä–æ–¥ —É–¥–∞–ª–µ–Ω, –æ—Ç—á–µ—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å ‚úÖ"
        )
        await state.clear()
